package controllers;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.validation.Valid;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.AliasFor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import controllers.Department;
import repository.AdslRepository;
import repository.SecurityRepository;
import repository.SubdivisionRepository;
import repository.TelephoneRepository;
import repository.UserRepository;
import repository.DepartmentRepository;
import repository.DotsRepository;
import repository.ErrorCableRepository;
import repository.RoleRepository;
import tables.SecurityView;
import tables.UserInfo;
import tables.UserInfoV2;
import tables.UserNameId;
import tables.adslInfo;
import tables.companateSelect2;
import tables.subdivision;
import tables.subdivisionSelect2;
import tables.errorCableInfo;
import tables.table1;

@Controller
public class GreetingController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private DepartmentRepository departmentRepository;
	@Autowired
	private TelephoneRepository telephoneRepository;
	@Autowired
	private AdslRepository adslRepository;
	@Autowired
	private ErrorCableRepository errorCableRepository;
	@Autowired
	private SecurityRepository securityRepository;
	@Autowired
	private SubdivisionRepository subdivisionRepository;
	@Autowired
	private RoleRepository roleRepository;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private UserRepository user_roleRepository;
	@Autowired
	private DotsRepository dotsRepository;

	@Secured(value = { "ROLE_ADMIN" })
	@RequestMapping(value = "/greeting", method = RequestMethod.GET)
	/**
	 * Тестовый метод(del)
	 * @param name
	 * @param model
	 * @return
	 */
	public String greeting(@RequestParam(value = "name", required = false, defaultValue = "World") String name,
			Model model) {
		model.addAttribute("name", name);
		return "greeting";
	}
	
	@ResponseBody
	@RequestMapping(value = "/load_data")
	/**
	 * Тестовй класс загрузка данных из файла(del)
	 * @return
	 * @throws IOException
	 */
	public String importData() throws IOException {
		String response="";
		
		InputStream in = new FileInputStream("C:\\Users\\megroup9gmail.com\\Desktop\\work.xls");
        HSSFWorkbook wb = new HSSFWorkbook(in);
 
        Sheet sheet = wb.getSheetAt(0);
        Iterator<Row> it = sheet.iterator();
        while (it.hasNext()) {
            Row row = it.next();
            Iterator<Cell> cells = row.iterator();
            while (cells.hasNext()) {
                Cell cell = cells.next();
                int cellType = cell.getCellType();
                switch (cellType) {
                    case Cell.CELL_TYPE_STRING:
                        System.out.print(cell.getStringCellValue() + "=");
                        response += cell.getStringCellValue()+ "  ";
                        break;
                    case Cell.CELL_TYPE_NUMERIC:
                        System.out.print("[" + cell.getNumericCellValue() + "]");
                        //response += cell.getStringCellValue().toString();
                        break;
 
                    case Cell.CELL_TYPE_FORMULA:
                        System.out.print("[" + cell.getNumericCellValue() + "]");
                        break;
                    default:
                        System.out.print("|");
                        break;
                }
            }
            System.out.println("end");
        }
		
		return response;
	}
	
	@RequestMapping(value = "/kartoteka", method = RequestMethod.GET)
	public String kartoteka(Model model) {
		// List<User> results = userRepository.find("dd");
		// name=WebSecurityConfig.getCurrentUsername();//Получим логин пользователя
		// model.addAttribute("name", name);
		return "kartoteka";
	}
	
	@RequestMapping(value = "/subdivision", method = RequestMethod.GET)
	public String subdivision(Model model) {
		// List<User> results = userRepository.find("dd");
		// name=WebSecurityConfig.getCurrentUsername();//Получим логин пользователя
		// model.addAttribute("name", name);
		return "subdivision";
	}
	
	/*
	//!!!!!!!!!!!!!!!!!!!!!!!!!!!
	@RequestMapping(value = "/kartoteka", method = RequestMethod.GET)
    public String addKartoteka(Model model) {
        model.addAttribute("adsl", new ADSL());
        return "kartoteka";
    }
	
    @RequestMapping(value = "/kartoteka", method = RequestMethod.POST)
    public String processAddKartoteka(@Valid @ModelAttribute("adsl") ADSL adsl, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "kartoteka";
        }
        //if(adslRepository.findAllcount(adsl.getField())>0) {
        //	return "kartoteka";
        //}
        //else {
        //	Adsl ad = new Adsl();
        //	ad.setName(adsl.getField());
        //	adslRepository.save(ad);
        //}
        return "kartoteka";
    }
	*/
	
	/*
	 * insert in database User u = new User(); u.setEmail("dddd");
	 * u.setName("dddd"); u.setLogin("login"); u.setPicture("http://fjfjs.com");
	 * userRepository.save(u);
	 */

	@RequestMapping(value = "/ajax/getRole", method = RequestMethod.GET)
	@ResponseBody
	public UserInfoV2 getRole(@RequestParam(value = "name") String name) {
		// Получим пользователей
		List<User> results = userRepository.find(name);
		if (!results.isEmpty()) {// Если у данного пользователя есть роли
			Iterator iterator = results.iterator();
			User us = (User) iterator.next();
			// Сохраним Основные данные о пользователе
			UserInfoV2 ui = new UserInfoV2(us.getFirstname(), us.getSecondname(), us.getThirdname(), us.getUsername());
			// Приступим к поиску ролей
			// Получим таблицу с ролями
			List<User_Role> ur = us.getRole();
			Iterator iterator1 = ur.iterator();
			// Сохраним наименование ролей
			int chr = 0;
			while (iterator1.hasNext()) {
				String str = ((User_Role) iterator1.next()).getRole().getRoleName();
				ui.add_(chr, str, "selected");
				chr++;
			}
			////
			// Получим роли не связаные с user=:name но связанные хотябы с одним
			//// пользователем
			List<Role> res = roleRepository.find5(name);
			Iterator iterator3 = res.iterator();
			// Сохраним наименование ролей
			while (iterator3.hasNext()) {
				String str = ((Role) iterator3.next()).getRoleName();
				ui.add_(chr, str, "");
			}
			// Получим таблицу с ролями не относящимися не к какому пользователю
			List<Role> resu = roleRepository.find6();
			Iterator iterator2 = resu.iterator();
			// Сохраним наименование ролей
			while (iterator2.hasNext()) {
				String str = ((Role) iterator2.next()).getRoleName();
				ui.add_(chr, str, "");
			}
			return ui;
		} else {// Если данный пользователь не имеет ролей
			User us = userRepository.getUserInfo(name);
			UserInfoV2 ui = new UserInfoV2(us.getFirstname(), us.getSecondname(), us.getThirdname(), us.getUsername());
			return ui;
		}
	}

	/*
	 * @RequestMapping(value= "/ajax/test", method=RequestMethod.GET)
	 * 
	 * @ResponseBody public String getRole() { //Найдём роли которые используются
	 * пользователем
	 * 
	 * //Найдём роли которые не используются пользователем, но используются одним из
	 * пользователей
	 * 
	 * //Найдём роли которые не используются пользователями
	 * 
	 * Iterator iterator1 = roleRepository.find5("priya").iterator();
	 * iterator1.next(); return ((Role)iterator1.next()).getRoleName();
	 * 
	 * //Iterator iterator1 = roleRepository.find4("priya").iterator(); //return
	 * ((User_Role)iterator1.next()).getUser().getId(); }
	 */

		@ResponseBody
		@RequestMapping(value = "/ajax/errorCable_info")
		public errorCableInfo get_errorCable_info(@RequestParam(value = "name") String name,
				@RequestParam(value = "elem") Integer elem) {
			// Узнаем число записей и выберем записи с по
			List<ErrorCable> adsl = errorCableRepository.findAll('%' + name + '%');
			// Сортируем полученные значения
			adsl.sort(Comparator.comparing(ErrorCable::getName));
			Integer ch = errorCableRepository.findAllcount('%' + name + '%');
			// Инициализация число элементов номер страницы
			errorCableInfo adsl_view = new errorCableInfo(ch, elem);

			// Сделаем набор
			Iterator iter2 = adsl.iterator();
			Integer ch1 = 0;
			while (iter2.hasNext()) {
				ch1++;
				if (ch1 <= elem * 20 && ch1 > (elem - 1) * 20) {
					adsl_view.add(((ErrorCable) iter2.next()).getName());
				} else
					iter2.next();
			}
			return adsl_view;
		}
	
		@ResponseBody
		@RequestMapping(value = "/errorCable/errorCable_del") /// ajax/adsl_update   @RequestParam(value = "myData") JADSL name
		public String get_errorCable_del(@RequestParam(value = "name") List<String> name) {
			//Обновим данные
			for(int i = 0; i < name.size(); i++) {
				List<ErrorCable> adsl = errorCableRepository.findAll(name.get(i));
				Iterator iter2 = adsl.iterator();
				while (iter2.hasNext()) {
					ErrorCable ad = ((ErrorCable) iter2.next());
					errorCableRepository.delete(ad);
				}
			}
				return "Delete success";
		}
		
		@ResponseBody
		@RequestMapping(value = "/errorCable/errorCable_update") /// ajax/adsl_update
		public String get_errorCable_update(@RequestParam(value = "name") String name,
				@RequestParam(value = "oldName") String oldName) {
			//System.out.println(name + "   " + oldName);
			//Обновим данные
			if(errorCableRepository.findAllcount(name)<1) {
				List<ErrorCable> adsl = errorCableRepository.findAll(oldName);
				Iterator iter2 = adsl.iterator();
				while (iter2.hasNext()) {
					ErrorCable ad = ((ErrorCable) iter2.next());
					ad.setName(name);
					errorCableRepository.save(ad);
				}
				//System.out.println(name + "   " + oldName);
				return "Save success";
			}
			else{
				//System.out.println("Запись с таким именем уже существует");
				return "The record already exists";
			}
		}
		
		@ResponseBody
		@RequestMapping(value = "/errorCable/errorCable_create")
		public String get_errorCable_create(@RequestParam(value = "name") String adsl) {
			if(errorCableRepository.findAllcount(adsl)>0) {
	        	return "entry more then zero";
	        }
	        else {
	        	ErrorCable ad = new ErrorCable();
	        	ad.setName(adsl);
	        	errorCableRepository.save(ad);
	        }
			return "success";
		}
////////////////////////////////////////////////////////////////////////////////////////////		
		@ResponseBody
		@RequestMapping(value = "/subdivision/subdivision_info")
		public subdivision get_department_info(@RequestParam(value = "name") String name,
				@RequestParam(value = "elem") Integer elem, @RequestParam(value= "code") String code) {
			// Узнаем число записей и выберем записи с по
		//	List<Subdivision> adsl = subdivisionRepository.findAll('%' + name + '%');
			
			List<Subdivision> adsl = subdivisionRepository.findAll_('%' + name + '%', '%' + code + '%');
			
			// Сортируем полученные значения
			adsl.sort(Comparator.comparing(Subdivision::getName));
			Integer ch = subdivisionRepository.findAllcount_('%' + name + '%', '%' + code + '%');
			// Инициализация число элементов номер страницы
			subdivision adsl_view = new subdivision(ch, elem);

			// Сделаем набор
			Iterator iter2 = adsl.iterator();
			Integer ch1 = 0;
			while (iter2.hasNext()) {
				ch1++;
				if (ch1 <= elem * 20 && ch1 > (elem - 1) * 20) {
					adsl_view.add(((Subdivision) iter2.next()).getName());
				} else
					iter2.next();
			}
			return adsl_view;
		}
	
		@ResponseBody
		@RequestMapping(value = "/subdivision/subdivision_del") /// ajax/adsl_update   @RequestParam(value = "myData") JADSL name
		public String get_department_del(@RequestParam(value = "name") List<String> name) {
			//Обновим данные
			for(int i = 0; i < name.size(); i++) {
				List<Subdivision> adsl = subdivisionRepository.findAll(name.get(i));
				Iterator iter2 = adsl.iterator();
				while (iter2.hasNext()) {
					Subdivision ad = ((Subdivision) iter2.next());
					subdivisionRepository.delete(ad);
				}
			}
				return "Delete success";
		}
		
		@ResponseBody
		@RequestMapping(value = "/subdivision/subdivision_update") /// ajax/adsl_update
		public String get_department_update(@RequestParam(value = "name") String name,
				@RequestParam(value = "oldName") String oldName) {
			//System.out.println(name + "   " + oldName);
			//Обновим данные
			if(subdivisionRepository.findAllcount(name)<1) {
				List<Subdivision> adsl = subdivisionRepository.findAll(oldName);
				Iterator iter2 = adsl.iterator();
				while (iter2.hasNext()) {
					Subdivision ad = ((Subdivision) iter2.next());
					ad.setName(name);
					subdivisionRepository.save(ad);
				}
				//System.out.println(name + "   " + oldName);
				return "Save success";
			}
			else{
				//System.out.println("Запись с таким именем уже существует");
				return "The record already exists";
			}
		}
		
		@ResponseBody
		@RequestMapping(value = "/subdivision/subdivision_create")
		public String get_department_create(@RequestParam(value = "name") String name, @RequestParam(value = "code") String code) {
			if(subdivisionRepository.findAllcount(name)>0) {
	        	return "entry more then zero";
	        }
	        else {
	        	Subdivision ad = new Subdivision();
	        	ad.setName(name);
	        	ad.setCode(code);
	        	subdivisionRepository.save(ad);
	        }
			return "success";
		}
////////////////////////////////////////////////////////////////////////////////////////////
	@ResponseBody
	@RequestMapping(value = "/ajax/adsl_info")
	public adslInfo get_adsl_info(@RequestParam(value = "name") String name,
			@RequestParam(value = "elem") Integer elem) {
		// Узнаем число записей и выберем записи с по
		List<Adsl> adsl = adslRepository.findAll('%' + name + '%');
		// Сортируем полученные значения
		adsl.sort(Comparator.comparing(Adsl::getName));
		Integer ch = adslRepository.findAllcount('%' + name + '%');
		// Инициализация число элементов номер страницы
		adslInfo adsl_view = new adslInfo(ch, elem);

		// Сделаем набор
		Iterator iter2 = adsl.iterator();
		Integer ch1 = 0;
		while (iter2.hasNext()) {
			ch1++;
			if (ch1 <= elem * 20 && ch1 > (elem - 1) * 20) {
				adsl_view.add(((Adsl) iter2.next()).getName());
			} else
				iter2.next();
		}
		return adsl_view;
	}

	// 127.0.0.1:8080/adsl/adsl_update?name=_aaaaaaaa&oldName=6
	@ResponseBody
	@RequestMapping(value = "/adsl/adsl_update") /// ajax/adsl_update
	public String get_adsl_update(@RequestParam(value = "name") String name,
			@RequestParam(value = "oldName") String oldName) {
		//System.out.println(name + "   " + oldName);
		//Обновим данные
		if(adslRepository.findAllcount(name)<1) {
			List<Adsl> adsl = adslRepository.findAll(oldName);
			Iterator iter2 = adsl.iterator();
			while (iter2.hasNext()) {
				Adsl ad = ((Adsl) iter2.next());
				ad.setName(name);
				adslRepository.save(ad);
			}
			//System.out.println(name + "   " + oldName);
			return "Save success";
		}
		else{
			//System.out.println("Запись с таким именем уже существует");
			return "The record already exists";
		}
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/adsl/adsl_create", method=RequestMethod.POST) /// ajax/adsl_update
	public String get_test_del(@RequestParam(value = "adsl") String adsl) {
		System.out.print(adsl);
		return "success";
	}
	
	
	//http://spring-projects.ru/guides/handling-form-submission/
	/*
	@ResponseBody
	@RequestMapping(value="/greeting1", method=RequestMethod.GET)
    public String greetingForm(Model model) {
        model.addAttribute("greeting1", new Greeting());
        return "adsl";
    }
	@ResponseBody
    @RequestMapping(value="/greeting1", method=RequestMethod.POST)
    public String greetingSubmit(@ModelAttribute Greeting greeting1, Model model) {
        model.addAttribute("greeting1", greeting1);
        return "adsl";
    }*/
	
	//http://qaru.site/questions/178862/parsing-json-into-java-objects-in-spring-mvc - jsom spring mvc
	//http://qaru.site/questions/168531/parsing-json-in-spring-mvc-using-jackson-json
	@ResponseBody
	@RequestMapping(value = "/adsl/adsl_del") /// ajax/adsl_update   @RequestParam(value = "myData") JADSL name
	public String get_adsl_del(@RequestParam(value = "name") List<String> name) {
		//Обновим данные
		for(int i = 0; i < name.size(); i++) {
			List<Adsl> adsl = adslRepository.findAll(name.get(i));
			Iterator iter2 = adsl.iterator();
			while (iter2.hasNext()) {
				Adsl ad = ((Adsl) iter2.next());
				adslRepository.delete(ad);
			}
		}
			return "Delete success";
	}
	
	/*
	 * //Get all ADSL.name
	 * 
	 * @ResponseBody
	 * 
	 * @RequestMapping(value= "/ajax/adsl") public List<Adsl>
	 * get_dataAdsl(@RequestParam(value="name") String name) { List<Adsl> adsl =
	 * adslRepository.findAll('%'+name+'%');
	 * 
	 * return adsl; }
	 */
	/*
	@RequestMapping(value = "/adsl", method = RequestMethod.GET)
    public String add(Model model) {
        model.addAttribute("adsl", new ADSL());
        return "adsl";
    }
	
    @RequestMapping(value = "/adsl", method = RequestMethod.POST)
    public String processAdd(@Valid @ModelAttribute("adsl") ADSL adsl, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "adsl";
        }
        if(adslRepository.findAllcount(adsl.getField())>0) {
        	return "adsl";
        }
        else {
        	Adsl ad = new Adsl();
        	ad.setName(adsl.getField());
        	adslRepository.save(ad);
        }
        return "adsl";
    }
	*/
	
	@ResponseBody
	@RequestMapping(value = "/ajax/kartoteka_create")
	public String get_kartoteka_create(
			@RequestParam(value = "number") String number,
			@RequestParam(value = "addedNumber") String addaedNumber,//at1
			@RequestParam(value = "security") String security,//att2
			@RequestParam(value = "location") String location,//room
			@RequestParam(value = "subdivision") String subdivision,
			@RequestParam(value = "subdivisionCode") String subdivisionCode,
			@RequestParam(value = "cross1") String d1,
			@RequestParam(value = "cross2") String d2,
			@RequestParam(value = "cross3") String d3,
			@RequestParam(value = "cross4") String d4,
			@RequestParam(value = "cross5") String d5,
			@RequestParam(value = "note") String note
			) {
		Telephone tp = new Telephone();
		Subdivision sd = subdivisionRepository.findOne(subdivision, subdivisionCode);
		tp.setNumber(number);
		tp.setAtt1(addaedNumber);
		tp.setAtt2(security);
		tp.setRoom(location);
		Department dpp = new Department();
		dpp.setName("newDepartment");
		Subdivision sdd = new Subdivision();
		sdd.setName(subdivision);
		sdd.setCode(subdivisionCode);
		dpp.setSubdivision(sdd);
		tp.setDepartment(dpp);
		tp.setNote(note);
		if(d1 != "")
		{
			Dots d = new Dots();
			d.setDot(d1);
			dotsRepository.save(d);
		}
		if(d2 != "")
		{
			Dots d = new Dots();
			d.setDot(d2);
			dotsRepository.save(d);
		}
		if(d3 != "")
		{
			Dots d = new Dots();
			d.setDot(d3);
			dotsRepository.save(d);
		}
		if(d4 != "")
		{
			Dots d = new Dots();
			d.setDot(d4);
			dotsRepository.save(d);
		}
		if(d5 != "")
		{
			Dots d = new Dots();
			d.setDot(d5);
			dotsRepository.save(d);
		}
		return "success";
	}
	
	
	
	@RequestMapping(value = "/errorCable")
	public String errorCable() {
		return "errorCable";
	}
	
	@RequestMapping(value = "/adsl")
	public String adsl() {
		return "adsl";
	}
	
	@ResponseBody
	@RequestMapping(value = "/ajax/adsl_create")
	public String get_adsl_create(@RequestParam(value = "adsl") String adsl) {
		if(adslRepository.findAllcount(adsl)>0) {
        	return "entry more then zero";
        }
        else {
        	Adsl ad = new Adsl();
        	ad.setName(adsl);
        	adslRepository.save(ad);
        }
		return "success";
	}

	@RequestMapping(value = "/department")
	public String department() {
		return "department";
	}

	@RequestMapping(value = "/cooperators", method = RequestMethod.GET)
	public String kooperators(Model model) {
		return "cooperators";
	}

	/*
	 * //Получим Информацию по конкретному пользователю
	 * 
	 * @RequestMapping(value= "/ajax/getUserInfo", method=RequestMethod.GET)
	 * 
	 * @ResponseBody public UserInfo getUserInfo(@RequestParam(value="name") String
	 * name) { //Получим пользователей List<User> results =
	 * userRepository.find(name); if(!results.isEmpty()) {//Если у данного
	 * пользователя есть роли Iterator iterator = results.iterator(); User us =
	 * (User)iterator.next(); //Сохраним Основные данные о пользователе UserInfo ui
	 * = new UserInfo(us.getFirstname(),us.getSecondname(),us.getThirdname(),us.
	 * getUsername()); //Приступим к поиску ролей //Получим таблицу с ролями
	 * List<User_Role> ur = us.getRole(); Iterator iterator1 = ur.iterator();
	 * //Сохраним наименование ролей while (iterator1.hasNext()) {
	 * ui.add(((User_Role)iterator1.next()).getRole().getRoleName()); } return ui; }
	 * else {//Если данный пользователь не имеет ролей User us =
	 * userRepository.getUserInfo(name); UserInfo ui = new
	 * UserInfo(us.getFirstname(),us.getSecondname(),us.getThirdname(),us.
	 * getUsername()); return ui; } }
	 */

	// Получим логины роли пользователей для прорисовки элементов навигации
	// доступных конкретному пользователю
	@RequestMapping(value = "/getUserNameRole", method = RequestMethod.GET)
	@ResponseBody
	public SecurityView greeting() {
		SecurityView sw = new SecurityView((String) WebSecurityConfig.getCurrentUsername());// Добавим в представление
																							// имя текущего пользователя
		Iterator iterator = WebSecurityConfig.getCurrentUserrole();// Найдём и вернём роли
		while (iterator.hasNext()) {
			sw.add(iterator.next().toString());
		}
		return sw;
	}

	// Получим логин ID пользователей
	@RequestMapping(value = "/getUsers", method = RequestMethod.GET)
	@ResponseBody
	public UserNameId getUsers() {
		UserNameId unr = new UserNameId();
		List<User> results = userRepository.findName();
		Iterator iter = results.iterator();
		while (iter.hasNext()) {
			User user = (User) iter.next();
			unr.add(user.getUsername(), user.getId());
		}
		return unr;
	}

	/*
	 * @RequestMapping(value= "/kartoteka/page/*", method=RequestMethod.GET) public
	 * String kartoteka1(@RequestParam(value="name", required=false,
	 * defaultValue="World") String name, Model model) {
	 * //name=WebSecurityConfig.getCurrentUsername(); model.addAttribute("name",
	 * name); return "kartoteka"; }
	 */

	@RequestMapping(value = "/test")
	public String test() {
		return "test";
	}

	@RequestMapping(value = "/ajaxtest", method = RequestMethod.GET)
	@ResponseBody
	public table1 ajaxTest(@RequestParam String number, @RequestParam String att1, @RequestParam String att2,
			@RequestParam String room, @RequestParam String department, @RequestParam String adsl,
			@RequestParam String subdivision, @RequestParam String subdivision_code, @RequestParam Integer page) {
		List<Telephone> results = telephoneRepository.find("%" + number + "%", "%" + att1 + "%", "%" + att2 + "%",
				"%" + room + "%", "%" + department + "%", "%" + adsl + "%", "%" + subdivision + "%",
				"%" + subdivision_code + "%");
		Iterator iterator = results.iterator();
		int ch_page = 1;// Номер строки
		while (iterator.hasNext()) {
			iterator.next();
			ch_page++;
		}
		table1 tb = new table1(page, ch_page);
		// Вставляем через итератор (Модифицированный метод)
		Iterator iterator2 = results.iterator();
		int ch = 1;// Номер строки
		while (iterator2.hasNext()) {
			Telephone tl = (Telephone) iterator2.next();
			if (ch > (page - 1) * 20) {
				if (ch <= (page * 20)) {
					for(Department dddd:tl.getDepartment())
						for(Subdivision sddd:dddd.getSubdivision())
							tb.add(ch, tl.getNumber(), tl.getAtt1(), tl.getAtt2(), tl.getRoom(),
									dddd.getName(), dddd.getName(),
									sddd.getCode(), tl.getAdsl().getName());
				} else
					break;
			}
			ch++;
		}
		return tb;
	}

	/*
	 * //http://www.java2s.com/Tutorials/Java/JPA/4325__JPA_Query_In_OneToMany.htm -
	 * Единственный нормальный мануал по JPQL //Тестим ajax json
	 * //http://devcolibri.com/2890 - про сторону сервера
	 * //https://ru.stackoverflow.com/questions/624280/ajax-spring-mvc - про сторону
	 * клиента //https://learn.javascript.ru/json - как распарсить на клиенте
	 * 
	 * @RequestMapping(value= "/test") public String test() { return "test"; }
	 * 
	 * //Сервис выдающий данные в формате json
	 * 
	 * @RequestMapping(value = "/ajaxtest", method = RequestMethod.GET)
	 * 
	 * @ResponseBody public table1 ajaxTest(){ List<User> results =
	 * userRepository.find("dd"); table1 tb=new table1(); tb.add(1, "fdfd", "fdfd",
	 * "fdfd", "fdfd", "fdfd", "fdfd", "fdfd"); tb.add(2, "fjdfhj", "fdfd", "fdfd",
	 * "fdfd", "fdfd", "fdfd", "fdfd"); tb.add(3, "434", "456", "456", "45", "456",
	 * "56", "4556");
	 * 
	 * 
	 * //Вставляем через итератор Iterator iterator2 = results.iterator(); while
	 * (iterator2.hasNext()) { User bus = (User) iterator2.next();
	 * tb.add(4,bus.getName(), bus.getEmail(), "xozain", "room", "ult", "dot",
	 * "adsl"); } return tb; } //Конец теста
	 */

	/*
	 * //Тестим ajax solo //http://devcolibri.com/2890
	 * 
	 * @RequestMapping(value= "/test1") public String kartoteka() { return "test1";
	 * }
	 * 
	 * @RequestMapping(value = "/ajaxtest1", method = RequestMethod.GET)
	 * 
	 * @ResponseBody public Set<String> ajaxTest() { Set<String> records = new
	 * HashSet<String>(); records.add("<h1>Record #1</h1>");
	 * records.add("Record #2"); return records; } //Конец теста
	 */
/*	
	@ResponseBody
	@RequestMapping(value = "/subdivision/get_dataList")
	public companateSelect2 get_dataList() throws JsonProcessingException {
		ArrayList<String> sd = new ArrayList<String>();
		sd = (ArrayList<String>) subdivisionRepository.findAll_();
		
		
		companateSelect2 cs2 = new companateSelect2();
		for(int i = 1; i < sd.size()+1; i++) {
			subdivisionSelect2 sd_ = new subdivisionSelect2(i, sd.get(i-1));
			ObjectMapper mapper = new ObjectMapper();
			String jsonInString = mapper.writeValueAsString(sd_);
			cs2.add(jsonInString);
		}
		
		//ObjectMapper mapper = new ObjectMapper();
		//String jsonInString = mapper.writeValueAsString(cs2);		

		return cs2;
	}

	
//Соберём json и отправим его
	@ResponseBody
	@RequestMapping(value = "/subdivision/get_dataList")
	public String get_dataList() throws JsonProcessingException {
		String cs2 = "{"+
		  "\"results\": ["+
		    "{"+
		      "\"id\": 1,"+
		      "\"text\": \"Option 1\""+
		    "},"+
		    "{"+
		      "\"id\": 2,"+
		      "\"text\": \"Option 2\""+
		    "}"+
		  "],"+
		  "\"pagination\": {"+
		    "\"more\": true"+
		  "}"+
		  "}";
		return cs2;
	}
*/
	
	@ResponseBody
	@RequestMapping(value = "/subdivision/get_dataList")
	public ResponseEntity<String> get_datatry() throws JsonProcessingException {
		ArrayList<String> sd = new ArrayList<String>();
		sd = (ArrayList<String>) subdivisionRepository.findAll_();
		String cs2 = "{"+
				  "\"results\": [";
		for(int i = 1; i < sd.size()+1; i++) {
			cs2+="{\"text\": \"" + sd.get(i - 1) + "\"" + "}";
			if(i + 1 != sd.size() + 1) cs2 += ",";
		}
		cs2 +="]}";
		HttpHeaders responseHeaders = new HttpHeaders();
	    responseHeaders.add("Content-Type", "application/json; charset=UTF-8");
	    return new ResponseEntity<String>(cs2,responseHeaders, HttpStatus.OK);
		//return cs2;
	}
	
	@ResponseBody
	@RequestMapping(value = "/subdivision/get_dataListJson")
	public ResponseEntity<String> get_dataList(@RequestParam(value = "search") String search, @RequestParam(value = "type") String type) throws JsonProcessingException {
		ArrayList<String> sd = new ArrayList<String>();
		sd = (ArrayList<String>) subdivisionRepository.findAll_();
		String cs2 = "{"+
				  "\"results\": [";
		for(int i = 1; i < sd.size()+1; i++) {
			cs2+="{" + "\"id\": " + i + "," + "\"text\": \"" + sd.get(i - 1) + "\"" + "}";
			if(i + 1 != sd.size() + 1) cs2 += ",";
		}
		cs2 +="],"+
				  "\"pagination\": {"+
				    "\"more\": false"+
				  "}"+
				  "}";
		/*
		String cs2 = "{"+
		  "\"results\": ["+
				
		    "{"+
		      "\"id\": 1,"+
		      "\"text\": \"Option 1\""+
		    "},"+
		      
		    "{"+
		      "\"id\": 2,"+
		      "\"text\": \"Option 2\""+
		    "}"+
		      
		  "],"+
		  "\"pagination\": {"+
		    "\"more\": true"+
		  "}"+
		  "}";
		  */
		HttpHeaders responseHeaders = new HttpHeaders();
	    responseHeaders.add("Content-Type", "application/json; charset=UTF-8");
	    return new ResponseEntity<String>(cs2,responseHeaders, HttpStatus.OK);
		//return cs2;
	}
}
